#!/usr/bin/env ruby
#
# == Synposis
#
# gallerubify.rb: generates gallery from directories
#
# == Usage
#
# gallerubify.rb [OPTION] ... DIR
#
# -h, --help:
#   show help
#
# -o <out>, --output <out>:
#   generates output gallery in <out> instead of the default output/
#
# -c <config>, --config <config>:
#   reads configuration options from <config> instead of config.yml
#
# -f, --force
#   forces regeneration of HTML files even if we think they album is unchanged.
#
# -v, --verbose
#   gives verbose status information
#
# DIR: The directory to look for input albums in.

require 'yaml'
require 'getoptlong'
require 'rdoc/usage'

require 'galleruby'

def main
    opts = GetoptLong.new(
        [ '--help', '-h', GetoptLong::NO_ARGUMENT ],
        [ '--output', '-o', GetoptLong::OPTIONAL_ARGUMENT ],
        [ '--config', '-c', GetoptLong::OPTIONAL_ARGUMENT ],
        [ '--force', '-f', GetoptLong::NO_ARGUMENT ],
        [ '--verbose', '-v', GetoptLong::NO_ARGUMENT ]
    )

    output_directory = 'output'
    config_file = 'config.yml'
    force_regenerate = verbose = false

    opts.each do |opt, arg|
        case opt
        when '--help'
            RDoc::usage
        when '--output'
            output_directory = arg
        when '--config'
            config_file = arg
        when '--force'
            force_regenerate = true
        when '--verbose'
            verbose = true
        end
    end

    if ARGV.empty? then
        RDoc::usage
        return 1
    end

    directory = ARGV[0]

    # These are the default options
    config = {
        'title' => 'My Gallery',
        'thumb' => [320, 256],
        'medium' => [800, 600],
        'large' => [1280, 1024],
        'templates' => "#{File.dirname(__FILE__)}/../templates",
        'static_files' => "#{File.dirname(__FILE__)}/../static",
    }
    config.merge!(YAML::load(File.read(config_file)) || {})

    # We make sure to copy all the static resources.
    puts "Copying static resources to output."
    Dir["#{config['static_files']}/*"].each do |path|
      output_path = "#{output_directory}/static/#{File.basename(path)}"
      File.copy(path, output_path)
      puts "cp #{path} #{output_path}" if verbose
    end

    puts "Done! Enumerating albums."

    # This dynamically generates a list of all the HAML templates referenced during
    # a render of album.haml, which we use to figure out if any of them have been
    # modified since last we generated.
    deps = Galleruby::TemplateDependencyCalculator.new('album', config)
    templates_modified = deps.files.collect { |file|
        path = deps.template_path(file)
        File.exist?(path) ? File.mtime(path) : Time.now
    }
    templates_modified = templates_modified.max

    encountered_links = {}

    # We iterate over each directory inside the directory passed on the commandline,
    # checking if any of them are considered valid albums (have .galleruby.yml etc,
    # see Album#valid?) and regenerate thumbnails & HTML if its needed.
    albums_by_year = Hash.new { |hash, key| hash[key] = [] }
    Dir.new(directory).each do |album|
        album = Galleruby::Album.new(directory, album)

        next if not album.valid?

        if encountered_links.has_key?(album.link) then
          puts "#{album.name}: WARNING! This album has the same link name as '#{encountered_links[album.link]}', skipping."
          next
        end

        encountered_links[album.link] = album.name

        if force_regenerate or album.needs_updating?(output_directory, templates_modified) then
            puts "#{album.name}: Processing album"
            if not album.process(config, output_directory) then
                puts "#{album.name}: WARNING! No images to process, skipping"
                next
            end

            puts "#{album.name}: Rendering HTML"
            album.render_to(config, output_directory)
        else
            puts "#{album.name}: No update needed, skipping"
        end

        albums_by_year[album.year] << album
    end

    puts "All done! Generating index."

    # Finally we generate the index unconditionally, since it's a really cheap
    # operation. It's possible that we should not do this unless neeed, so that
    # index.html's mtime will have some value.
    albums_by_year = albums_by_year.sort_by { |e| e[0] }.reverse.map {|year, albums| {:year => year, :albums => albums.map {|album| album.template_info }.sort_by {|album| album[:first]}.reverse } }
    Galleruby::Template.new('index', config).render_to("#{output_directory}/index.html", {:config => config, :albums_by_year => albums_by_year}, output_directory)

    return 0
end

exit main
