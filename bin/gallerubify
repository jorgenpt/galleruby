#!/usr/bin/env ruby

require 'fileutils'
require 'yaml'
require 'optparse'

require 'galleruby'

def main
    # These are the default options
    default_config = {
        :title => 'My Gallery',
        :thumb => [320, 256],
        :medium => [800, 600],
        :large => [1280, 1024],
        :templates => "#{File.dirname(__FILE__)}/../templates",
        :static => "#{File.dirname(__FILE__)}/../static",
        :output => 'output',
        :verbose => false,
        :force => false
    }

    config_file = nil
    config = {}
    parser = OptionParser.new do |opts|
      opts.banner = "Usage: gallerubify [OPTION] ... DIR"
      opts.program_name = 'gallerubify'
      opts.version = Galleruby::VERSION

      opts.on("-c", "--config FILE", "Read configuration options from FILE.") do |c|
        config_file = c
      end

      opts.on("-o", "--output DIRECTORY", "Generates output gallery in DIRECTORY instead of the default 'output'") do |d|
        config[:output] = d
      end

      opts.on("-t", "--title TITLE", "Set gallery title to TITLE") do |t|
        config[:title] = t
      end

      opts.on("--templates DIRECTORY", "Read templates from DIRECTORY.") do |d|
        config[:templates] = d
      end

      opts.on("-s", "--static DIRECTORY", "Read static files from DIRECTORY.") do |d|
        config[:static] = d
      end

      opts.on("-f", "--[no-]force", "Force regeneration of HTML.") do |f|
        config[:force] = f
      end

      opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
        config[:verbose] = v
      end

      opts.on_tail("-h", "--help", "Show this message") do
        puts opts
        return 0
      end

      opts.on_tail("--version", "Show version") do
        puts opts.ver
        return 0
      end
    end

    begin
      parser.parse!
    rescue OptionParser::ParseError
      parser.warn $!
      return 1
    end

    if ARGV.empty? then
      puts parser
      return 1
    end

    directory = ARGV[0]

    if not config_file.nil? then
      loaded_config = YAML.load(File.read(config_file)) || {}
      loaded_config.keys.each do |key|
        loaded_config[key.to_sym] = loaded_config[key]
        loaded_config.delete(key)
      end
    else
      loaded_config = {}
    end

    # This sets the right order of precedence of default config, config file and
    # command-line options. Commandline options are the most important, then
    # loaded options, and at last it falls back to the default config.
    config = default_config.merge(loaded_config.merge(config))

    # We make sure to copy all the static resources.
    puts "Copying static resources to output."
    Dir["#{config[:static]}/*"].each do |path|
      output_path = "#{config[:output]}/static/#{File.basename(path)}"
      FileUtils.cp(path, output_path)
      puts "cp #{path} #{output_path}" if config[:verbose]
    end

    puts "Done! Enumerating albums."

    # This dynamically generates a list of all the HAML templates referenced during
    # a render of album.haml, which we use to figure out if any of them have been
    # modified since last we generated.
    deps = Galleruby::TemplateDependencyCalculator.new('album', config)
    templates_modified = deps.files.collect { |file|
        path = deps.template_path(file)
        File.exist?(path) ? File.mtime(path) : Time.now
    }
    templates_modified = templates_modified.max

    encountered_links = {}

    # We iterate over each directory inside the directory passed on the commandline,
    # checking if any of them are considered valid albums (have .galleruby.yml etc,
    # see Album#valid?) and regenerate thumbnails & HTML if its needed.
    albums_by_year = Hash.new { |hash, key| hash[key] = [] }
    Dir.new(directory).each do |album|
        album = Galleruby::Album.new(directory, album)

        next if not album.valid?

        if encountered_links.has_key?(album.link) then
          puts "#{album.name}: WARNING! This album has the same link name as '#{encountered_links[album.link]}', skipping."
          next
        end

        encountered_links[album.link] = album.name

        if config[:force] or album.needs_updating?(config[:output], templates_modified) then
            puts "#{album.name}: Processing album"
            if not album.process(config, config[:output]) then
                puts "#{album.name}: WARNING! No images to process, skipping"
                next
            end

            puts "#{album.name}: Rendering HTML"
            album.render_to(config, config[:output])
        else
            puts "#{album.name}: No update needed, skipping"
        end

        albums_by_year[album.year] << album
    end

    puts "All done! Generating index."

    # Finally we generate the index unconditionally, since it's a really cheap
    # operation. It's possible that we should not do this unless neeed, so that
    # index.html's mtime will have some value.
    albums_by_year = albums_by_year.sort_by { |e| e[0] }.reverse.map {|year, albums| {:year => year, :albums => albums.map {|album| album.template_info }.sort_by {|album| album[:first]}.reverse } }
    Galleruby::Template.new('index', config).render_to("#{config[:output]}/index.html", {:albums_by_year => albums_by_year}, config[:output])

    return 0
end

exit main
